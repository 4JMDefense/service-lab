version: '3.8'
services:
  zookeeper:
    image: wurstmeister/zookeeper
    ports:
      - "2181:2181"
    hostname: zookeeper
    networks:
      - my-network
    volumes:
      - /home/ubuntu/zookeeper/data:/opt/zookeeper-3.4.13/data

  kafka:
    image: wurstmeister/kafka
    command: [start-kafka.sh]
    ports:
      - "9092:9092"
    hostname: kafka
    environment:
      KAFKA_CREATE_TOPICS: "events:1:1"
      KAFKA_ADVERTISED_HOST_NAME: "ec2-44-229-192-171.us-west-2.compute.amazonaws.com"
      KAFKA_LISTENERS: INSIDE://:29092,OUTSIDE://:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:29092,OUTSIDE://ec2-44-229-192-171.us-west-2.compute.amazonaws.com:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LOG_DIRS: /kafka/kafka-logs
      KAFKA_BROKER_ID: 1
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /home/ubuntu/kafka:/kafka/kafka-logs
    depends_on:
      - zookeeper
    networks:
      - my-network
    healthcheck:
      test: ["CMD", "bash", "-c", "echo > /dev/tcp/kafka/9092"]
      interval: 10s
      timeout: 5s
      retries: 5

  db:
    image: mysql:5.7
    restart: always
    environment:
      MYSQL_DATABASE: 'storage'
      MYSQL_USER: 'suser'
      MYSQL_PASSWORD: 'passpass'
      MYSQL_ROOT_PASSWORD: 'passpass'
    ports:
      - '3306:3306'
    expose:
      - '3306'
    volumes:
      - my-db:/var/lib/mysql
    networks:
      - my-network

  receiver:
    image: jmdizon5/receiver:latest
    ports:
      - "8080:8080"
    depends_on:
      - kafka
    networks:
      - my-network

  storage:
    image: jmdizon5/storage:latest
    ports:
      - "8090:8090"
    depends_on:
      kafka:
        condition: service_healthy
      db:
        condition: service_started
    networks:
      - my-network

  processing:
    image: processing
    ports:
      - "8100:8100"
    network_mode: "host"
    depends_on:
      - storage

  analyzer:
    image: analyzer
    ports:
      - "8110:8110"
    depends_on:
      - kafka
    networks:
      - my-network

  dashboard: 
    image: dashboard
    ports:
      - "8888:8888"
    networks:
      - my-network

networks:
  my-network:

volumes:
  my-db:

